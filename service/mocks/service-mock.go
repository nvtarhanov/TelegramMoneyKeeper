// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommandService is a mock of CommandService interface.
type MockCommandService struct {
	ctrl     *gomock.Controller
	recorder *MockCommandServiceMockRecorder
}

// MockCommandServiceMockRecorder is the mock recorder for MockCommandService.
type MockCommandServiceMockRecorder struct {
	mock *MockCommandService
}

// NewMockCommandService creates a new mock instance.
func NewMockCommandService(ctrl *gomock.Controller) *MockCommandService {
	mock := &MockCommandService{ctrl: ctrl}
	mock.recorder = &MockCommandServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandService) EXPECT() *MockCommandServiceMockRecorder {
	return m.recorder
}

// GetCalculatedData mocks base method.
func (m *MockCommandService) GetCalculatedData(chatID int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCalculatedData", chatID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCalculatedData indicates an expected call of GetCalculatedData.
func (mr *MockCommandServiceMockRecorder) GetCalculatedData(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCalculatedData", reflect.TypeOf((*MockCommandService)(nil).GetCalculatedData), chatID)
}

// ProcessCommand mocks base method.
func (m *MockCommandService) ProcessCommand(inState int, inCommand string, userID int) (string, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessCommand", inState, inCommand, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// ProcessCommand indicates an expected call of ProcessCommand.
func (mr *MockCommandServiceMockRecorder) ProcessCommand(inState, inCommand, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessCommand", reflect.TypeOf((*MockCommandService)(nil).ProcessCommand), inState, inCommand, userID)
}

// RegisterAccount mocks base method.
func (m *MockCommandService) RegisterAccount(chatID int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAccount", chatID)
	ret0, _ := ret[0].(string)
	return ret0
}

// RegisterAccount indicates an expected call of RegisterAccount.
func (mr *MockCommandServiceMockRecorder) RegisterAccount(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAccount", reflect.TypeOf((*MockCommandService)(nil).RegisterAccount), chatID)
}

// SetMoneyGoalByID mocks base method.
func (m *MockCommandService) SetMoneyGoalByID(chatID int, data string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMoneyGoalByID", chatID, data)
	ret0, _ := ret[0].(string)
	return ret0
}

// SetMoneyGoalByID indicates an expected call of SetMoneyGoalByID.
func (mr *MockCommandServiceMockRecorder) SetMoneyGoalByID(chatID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMoneyGoalByID", reflect.TypeOf((*MockCommandService)(nil).SetMoneyGoalByID), chatID, data)
}

// SetNameByID mocks base method.
func (m *MockCommandService) SetNameByID(chatID int, data string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNameByID", chatID, data)
	ret0, _ := ret[0].(string)
	return ret0
}

// SetNameByID indicates an expected call of SetNameByID.
func (mr *MockCommandServiceMockRecorder) SetNameByID(chatID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNameByID", reflect.TypeOf((*MockCommandService)(nil).SetNameByID), chatID, data)
}

// SetOutcomePerMonth mocks base method.
func (m *MockCommandService) SetOutcomePerMonth(chatID int, data string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOutcomePerMonth", chatID, data)
	ret0, _ := ret[0].(string)
	return ret0
}

// SetOutcomePerMonth indicates an expected call of SetOutcomePerMonth.
func (mr *MockCommandServiceMockRecorder) SetOutcomePerMonth(chatID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutcomePerMonth", reflect.TypeOf((*MockCommandService)(nil).SetOutcomePerMonth), chatID, data)
}

// SetSalaryPerMonth mocks base method.
func (m *MockCommandService) SetSalaryPerMonth(chatID int, data string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSalaryPerMonth", chatID, data)
	ret0, _ := ret[0].(string)
	return ret0
}

// SetSalaryPerMonth indicates an expected call of SetSalaryPerMonth.
func (mr *MockCommandServiceMockRecorder) SetSalaryPerMonth(chatID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSalaryPerMonth", reflect.TypeOf((*MockCommandService)(nil).SetSalaryPerMonth), chatID, data)
}

// SetStartSumByID mocks base method.
func (m *MockCommandService) SetStartSumByID(chatID int, data string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStartSumByID", chatID, data)
	ret0, _ := ret[0].(string)
	return ret0
}

// SetStartSumByID indicates an expected call of SetStartSumByID.
func (mr *MockCommandServiceMockRecorder) SetStartSumByID(chatID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStartSumByID", reflect.TypeOf((*MockCommandService)(nil).SetStartSumByID), chatID, data)
}

// SetTransaction mocks base method.
func (m *MockCommandService) SetTransaction(chatID int, data string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTransaction", chatID, data)
	ret0, _ := ret[0].(string)
	return ret0
}

// SetTransaction indicates an expected call of SetTransaction.
func (mr *MockCommandServiceMockRecorder) SetTransaction(chatID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransaction", reflect.TypeOf((*MockCommandService)(nil).SetTransaction), chatID, data)
}

// MockTransportService is a mock of TransportService interface.
type MockTransportService struct {
	ctrl     *gomock.Controller
	recorder *MockTransportServiceMockRecorder
}

// MockTransportServiceMockRecorder is the mock recorder for MockTransportService.
type MockTransportServiceMockRecorder struct {
	mock *MockTransportService
}

// NewMockTransportService creates a new mock instance.
func NewMockTransportService(ctrl *gomock.Controller) *MockTransportService {
	mock := &MockTransportService{ctrl: ctrl}
	mock.recorder = &MockTransportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransportService) EXPECT() *MockTransportServiceMockRecorder {
	return m.recorder
}

// GetState mocks base method.
func (m *MockTransportService) GetState(arg0 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockTransportServiceMockRecorder) GetState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockTransportService)(nil).GetState), arg0)
}

// UpdateState mocks base method.
func (m *MockTransportService) UpdateState(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockTransportServiceMockRecorder) UpdateState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockTransportService)(nil).UpdateState), arg0, arg1)
}
