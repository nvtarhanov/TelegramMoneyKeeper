// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/nvtarhanov/TelegramMoneyKeeper/model"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountRepository) CreateAccount(chatId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", chatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountRepositoryMockRecorder) CreateAccount(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountRepository)(nil).CreateAccount), chatId)
}

// GetAccountBySessionID mocks base method.
func (m *MockAccountRepository) GetAccountBySessionID(chatId int) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBySessionID", chatId)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBySessionID indicates an expected call of GetAccountBySessionID.
func (mr *MockAccountRepositoryMockRecorder) GetAccountBySessionID(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBySessionID", reflect.TypeOf((*MockAccountRepository)(nil).GetAccountBySessionID), chatId)
}

// SetMoneyGoal mocks base method.
func (m *MockAccountRepository) SetMoneyGoal(a *model.Account, moneyGoal int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMoneyGoal", a, moneyGoal)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMoneyGoal indicates an expected call of SetMoneyGoal.
func (mr *MockAccountRepositoryMockRecorder) SetMoneyGoal(a, moneyGoal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMoneyGoal", reflect.TypeOf((*MockAccountRepository)(nil).SetMoneyGoal), a, moneyGoal)
}

// SetName mocks base method.
func (m *MockAccountRepository) SetName(a *model.Account, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetName", a, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetName indicates an expected call of SetName.
func (mr *MockAccountRepositoryMockRecorder) SetName(a, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockAccountRepository)(nil).SetName), a, name)
}

// SetStartSum mocks base method.
func (m *MockAccountRepository) SetStartSum(a *model.Account, startSum int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStartSum", a, startSum)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStartSum indicates an expected call of SetStartSum.
func (mr *MockAccountRepositoryMockRecorder) SetStartSum(a, startSum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStartSum", reflect.TypeOf((*MockAccountRepository)(nil).SetStartSum), a, startSum)
}

// MockSalaryRecordRepository is a mock of SalaryRecordRepository interface.
type MockSalaryRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSalaryRecordRepositoryMockRecorder
}

// MockSalaryRecordRepositoryMockRecorder is the mock recorder for MockSalaryRecordRepository.
type MockSalaryRecordRepositoryMockRecorder struct {
	mock *MockSalaryRecordRepository
}

// NewMockSalaryRecordRepository creates a new mock instance.
func NewMockSalaryRecordRepository(ctrl *gomock.Controller) *MockSalaryRecordRepository {
	mock := &MockSalaryRecordRepository{ctrl: ctrl}
	mock.recorder = &MockSalaryRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSalaryRecordRepository) EXPECT() *MockSalaryRecordRepositoryMockRecorder {
	return m.recorder
}

// CreateEntrie mocks base method.
func (m *MockSalaryRecordRepository) CreateEntrie(chatID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntrie", chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntrie indicates an expected call of CreateEntrie.
func (mr *MockSalaryRecordRepositoryMockRecorder) CreateEntrie(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntrie", reflect.TypeOf((*MockSalaryRecordRepository)(nil).CreateEntrie), chatID)
}

// GetEntrieByAccountID mocks base method.
func (m *MockSalaryRecordRepository) GetEntrieByAccountID(ChatID int) (*model.Entrie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntrieByAccountID", ChatID)
	ret0, _ := ret[0].(*model.Entrie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntrieByAccountID indicates an expected call of GetEntrieByAccountID.
func (mr *MockSalaryRecordRepositoryMockRecorder) GetEntrieByAccountID(ChatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntrieByAccountID", reflect.TypeOf((*MockSalaryRecordRepository)(nil).GetEntrieByAccountID), ChatID)
}

// SetOutcomePerMonth mocks base method.
func (m *MockSalaryRecordRepository) SetOutcomePerMonth(entrie *model.Entrie, value int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOutcomePerMonth", entrie, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOutcomePerMonth indicates an expected call of SetOutcomePerMonth.
func (mr *MockSalaryRecordRepositoryMockRecorder) SetOutcomePerMonth(entrie, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutcomePerMonth", reflect.TypeOf((*MockSalaryRecordRepository)(nil).SetOutcomePerMonth), entrie, value)
}

// SetSalaryPerMonth mocks base method.
func (m *MockSalaryRecordRepository) SetSalaryPerMonth(entrie *model.Entrie, value int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSalaryPerMonth", entrie, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSalaryPerMonth indicates an expected call of SetSalaryPerMonth.
func (mr *MockSalaryRecordRepositoryMockRecorder) SetSalaryPerMonth(entrie, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSalaryPerMonth", reflect.TypeOf((*MockSalaryRecordRepository)(nil).SetSalaryPerMonth), entrie, value)
}

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionRepository) CreateTransaction(account *model.Account, value int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", account, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionRepositoryMockRecorder) CreateTransaction(account, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).CreateTransaction), account, value)
}

// GetTransactionSum mocks base method.
func (m *MockTransactionRepository) GetTransactionSum(ChatID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionSum", ChatID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionSum indicates an expected call of GetTransactionSum.
func (mr *MockTransactionRepositoryMockRecorder) GetTransactionSum(ChatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionSum", reflect.TypeOf((*MockTransactionRepository)(nil).GetTransactionSum), ChatID)
}

// MockStateRepository is a mock of StateRepository interface.
type MockStateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStateRepositoryMockRecorder
}

// MockStateRepositoryMockRecorder is the mock recorder for MockStateRepository.
type MockStateRepositoryMockRecorder struct {
	mock *MockStateRepository
}

// NewMockStateRepository creates a new mock instance.
func NewMockStateRepository(ctrl *gomock.Controller) *MockStateRepository {
	mock := &MockStateRepository{ctrl: ctrl}
	mock.recorder = &MockStateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateRepository) EXPECT() *MockStateRepositoryMockRecorder {
	return m.recorder
}

// GetCurrentStateByID mocks base method.
func (m *MockStateRepository) GetCurrentStateByID(chatID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentStateByID", chatID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentStateByID indicates an expected call of GetCurrentStateByID.
func (mr *MockStateRepositoryMockRecorder) GetCurrentStateByID(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentStateByID", reflect.TypeOf((*MockStateRepository)(nil).GetCurrentStateByID), chatID)
}

// UpdateState mocks base method.
func (m *MockStateRepository) UpdateState(chatID, state int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", chatID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockStateRepositoryMockRecorder) UpdateState(chatID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockStateRepository)(nil).UpdateState), chatID, state)
}

// WriteState mocks base method.
func (m *MockStateRepository) WriteState(chatID, state int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteState", chatID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteState indicates an expected call of WriteState.
func (mr *MockStateRepositoryMockRecorder) WriteState(chatID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteState", reflect.TypeOf((*MockStateRepository)(nil).WriteState), chatID, state)
}
